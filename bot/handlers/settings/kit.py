from bot import kbot
from bot import students
from bot import top_notification

from bot.helpers           import save_to
from bot.helpers.student   import Student
from bot.helpers.constants import GUIDE_MESSAGE

from re import fullmatch


@kbot.callback_query_handler(
    func=lambda callback:
        students[callback.message.chat.id].previous_message == "/settings" and
        callback.data == "set-institute-–ö–ò–¢"
)
@top_notification
def set_kit(callback):
    students[callback.message.chat.id] = Student(
        institute="–ö–ò–¢",
        institute_id="–ö–ò–¢",
        year="unknown",
        name="unknown",
        student_card_number="unknown"
    )
    
    students[callback.message.chat.id].previous_message = "/settings set-kit-group"  # Gate System (GS)
    
    kbot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text="–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã."
    )


@kbot.message_handler(func=lambda message: students[message.chat.id].previous_message == "/settings set-kit-group")
def set_kit_group_number(message):
    # Cleanning the chat
    try:
        kbot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        kbot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    except Exception:
        pass
    
    if not fullmatch("[4][1-4][2-5][0-9]", message.text):
        kbot.send_message(
            chat_id=message.chat.id,
            text="–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ò—Å–ø—Ä–∞–≤–ª—è–π—Å—è."
        )
        return
        
    students[message.chat.id].group_number = message.text

    if students[message.chat.id].group_number is None:
        kbot.send_message(
            chat_id=message.chat.id,
            text="–°–∞–π—Ç kai.ru –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Çü§∑üèº‚Äç‚ôÄÔ∏è",
            disable_web_page_preview=True
        )
        
        students[message.chat.id] = Student()  # Drop all the entered data
        return

    if students[message.chat.id].group_number == "non-existing":
        kbot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Çü§î"
        )
        kbot.send_message(
            chat_id=callback.message.chat.id,
            text="–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –µ—ë –≤–Ω–µ—Å—É—Ç –≤ –∫–∞—ë–≤—Å–∫—É—é –±–∞–∑—Éü§ì"
        )

        students[callback.message.chat.id] = Student()  # Drop all the entered data
        return

    students[message.chat.id].previous_message = None  # Gates System (GS)
    save_to(filename="data/users", object=students)

    kbot.send_message(
        chat_id=message.chat.id,
        text="–ó–∞–ø–æ–º–Ω–µ–Ω–æ!"
    )
    kbot.send_message(
        chat_id=message.chat.id,
        text=GUIDE_MESSAGE,
        parse_mode="Markdown"
    )
